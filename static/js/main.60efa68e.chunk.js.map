{"version":3,"sources":["models/player.tsx","redux/reducers/grid.tsx","redux/reducers/connectFour.tsx","redux/reducers/index.tsx","redux/actionTypes.tsx","redux/store.tsx","redux/actions.tsx","components/BoardCell.tsx","components/BoardColumn.tsx","components/Board.tsx","components/Controls.tsx","components/Instructions.tsx","ConnectFourApp.tsx","index.tsx"],"names":["Player","emptyGrid","width","height","Object","toConsumableArray","Array","map","_","None","playToken","grid","playedColumn","player","rowIdx","length","next","row","Error","checkLastMoveOn","winningCondition","playedRow","computeLength","it","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","pos","value","x","y","err","return","movePositionIt","regenerator_default","a","mark","dx","dy","wrap","_context","prev","stop","this","lengthForDirection","DefaultDimensions","initialState","currentPlayer","PlayerA","winner","history","past","future","combined","combineReducers","connectFour","state","arguments","action","type","objectSpread","columnIdx","payload","updatedGrid","PlayerB","concat","_state$history$past","toArray","nextPast","slice","unplayToken","_state$history$future","nextFuture","createStore","rootReducer","devToolsEnhancer","newGame","playAt","cancelMove","redoMove","BoardCell","react_default","createElement","className","props","React","Component","BoardColumn","playable","onClick","tokens","cell","idx","src_components_BoardCell","key","Board","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","_this","gridContent","_loop","col","playableColumn","boardRow","push","src_components_BoardColumn","connect","dispatch","bindActionCreators","Controls","Button_default","id","variant","disabled","canUndo","ArrowBack_default","NoteAdd_default","canRedo","ArrowForward_default","Instructions","_this$props","ConnectFourApp","src_components_Instructions","src_components_Board","src_components_Controls","rootElement","document","getElementById","ReactDOM","render","es","store","src_ConnectFourApp_0"],"mappings":"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","file":"static/js/main.60efa68e.chunk.js","sourcesContent":["export enum Player {\r\n  None = '',\r\n  PlayerA = '1',\r\n  PlayerB = '2'\r\n}\r\n","import { Player } from '../../models/player';\r\n\r\n/**\r\n * Create an empty grid with the given dimensions\r\n *\r\n * @param width Width of the grid\r\n * @param height Height of the grid\r\n */\r\nexport const emptyGrid = (width: number, height: number) => {\r\n  return [...Array(height)].map(_ => [...Array(width)].map(_ => Player.None));\r\n};\r\n\r\n/**\r\n * Create a new grid corresponding to the current grid\r\n * with the addition of the new token\r\n *\r\n * WARNING: throws in case of full column\r\n *\r\n * @param grid Current grid\r\n * @param playedColumn Location for the new token\r\n * @param player Owner of the token\r\n */\r\nexport const playToken = (grid: Player[][], playedColumn: number, player: Player) => {\r\n  for (let rowIdx = grid.length - 1; rowIdx >= 0; --rowIdx) {\r\n    if (grid[rowIdx][playedColumn] === Player.None) {\r\n      const next = [...grid].map(row => [...row]);\r\n      next[rowIdx][playedColumn] = player;\r\n      return next;\r\n    }\r\n  }\r\n  throw new Error(`Unable to play: invalid position`);\r\n};\r\n\r\n/**\r\n * Create a new grid corresponding to the current grid\r\n * with the removal of the top token of the column\r\n *\r\n * WARNING: throws in case of empty column\r\n *\r\n * @param grid Current grid\r\n * @param playedColumn Location for the new token\r\n */\r\nexport const unplayToken = (grid: Player[][], playedColumn: number) => {\r\n  for (let rowIdx = 0; rowIdx !== grid.length; ++rowIdx) {\r\n    if (grid[rowIdx][playedColumn] !== Player.None) {\r\n      const next = [...grid].map(row => [...row]);\r\n      next[rowIdx][playedColumn] = Player.None;\r\n      return next;\r\n    }\r\n  }\r\n  throw new Error(`Unable to unplay: invalid position`);\r\n};\r\n\r\n/**\r\n * Check if the latest token on {@link playedColumn} makes its owner win the game\r\n *\r\n * @param grid Current grid\r\n * @param playedColumn Column to assess, corresponding to the latest token played\r\n * @param winningCondition Winning condition, minimal length for a victory\r\n */\r\nexport const checkLastMoveOn = (grid: Player[][], playedColumn: number, winningCondition: number) => {\r\n  // find the index of the last token in the column\r\n  let playedRow = 0;\r\n  for (; grid[playedRow][playedColumn] === Player.None; ++playedRow) {}\r\n  const player = grid[playedRow][playedColumn];\r\n\r\n  type It = IterableIterator<{ x: number; y: number }>;\r\n  const computeLength = (it: It) => {\r\n    let length = 0;\r\n    for (const pos of it) {\r\n      if (pos.x < 0 || pos.x >= grid[0].length || pos.y < 0 || pos.y >= grid.length || grid[pos.y][pos.x] !== player)\r\n        break;\r\n      ++length;\r\n    }\r\n    return length;\r\n  };\r\n  const movePositionIt = function*(x: number, y: number, dx: number, dy: number) {\r\n    while (true) yield { x: (x += dx), y: (y += dy) };\r\n  };\r\n  const lengthForDirection = (dx: number, dy: number) => {\r\n    return (\r\n      computeLength(movePositionIt(playedColumn, playedRow, -dx, -dy)) +\r\n      computeLength(movePositionIt(playedColumn, playedRow, dx, dy)) +\r\n      1\r\n    );\r\n  };\r\n\r\n  return (\r\n    lengthForDirection(0, 1) >= winningCondition || // column\r\n    lengthForDirection(1, 0) >= winningCondition || // line\r\n    lengthForDirection(1, 1) >= winningCondition || // diagonal top-left\r\n    lengthForDirection(1, -1) >= winningCondition // diagonal top-right\r\n  );\r\n};\r\n","import { PLAY_AT, NEW_GAME, CANCEL_MOVE, REDO_MOVE } from '../actionTypes';\r\nimport { emptyGrid, playToken, checkLastMoveOn, unplayToken } from './grid';\r\nimport { Player } from '../../models/player';\r\nimport { Actions, playAt } from '../actions';\r\n\r\nexport const DefaultDimensions = {\r\n  height: 6,\r\n  width: 7,\r\n  victory: 4\r\n};\r\n\r\ntype State = {\r\n  grid: Player[][];\r\n  currentPlayer: Player;\r\n  winner: Player;\r\n  history: { past: number[]; future: number[] };\r\n};\r\n\r\nconst initialState: State = {\r\n  grid: emptyGrid(DefaultDimensions.width, DefaultDimensions.height),\r\n  currentPlayer: Player.PlayerA,\r\n  winner: Player.None,\r\n  history: { past: [], future: [] }\r\n};\r\n\r\nexport default function(state = initialState, action: Actions) {\r\n  switch (action.type) {\r\n    case NEW_GAME: {\r\n      return {\r\n        ...state,\r\n        grid: emptyGrid(DefaultDimensions.width, DefaultDimensions.height),\r\n        winner: Player.None,\r\n        history: { past: [], future: [] }\r\n      };\r\n    }\r\n    case PLAY_AT: {\r\n      if (state.winner !== Player.None) {\r\n        throw new Error(`Game is over, a player already won`);\r\n      }\r\n      const { columnIdx } = (action as ReturnType<typeof playAt>).payload;\r\n      const updatedGrid = playToken(state.grid, columnIdx, state.currentPlayer);\r\n      const done = checkLastMoveOn(updatedGrid, columnIdx, DefaultDimensions.victory);\r\n      return {\r\n        ...state,\r\n        grid: updatedGrid,\r\n        currentPlayer: state.currentPlayer === Player.PlayerA ? Player.PlayerB : Player.PlayerA,\r\n        winner: done ? state.currentPlayer : Player.None,\r\n        history: { past: [columnIdx, ...state.history.past], future: [] }\r\n      };\r\n    }\r\n    case CANCEL_MOVE: {\r\n      if (state.history.past.length === 0) {\r\n        throw new Error('Unable to undo operation, no more history available');\r\n      }\r\n      const [columnIdx, ...nextPast] = state.history.past;\r\n      const updatedGrid = unplayToken(state.grid, columnIdx);\r\n      return {\r\n        ...state,\r\n        grid: updatedGrid,\r\n        currentPlayer: state.currentPlayer === Player.PlayerA ? Player.PlayerB : Player.PlayerA,\r\n        winner: Player.None,\r\n        history: { past: nextPast, future: [columnIdx, ...state.history.future] }\r\n      };\r\n    }\r\n    case REDO_MOVE: {\r\n      if (state.history.future.length === 0) {\r\n        throw new Error('Unable to redo operation, no more history available');\r\n      }\r\n      const [columnIdx, ...nextFuture] = state.history.future;\r\n      const updatedGrid = playToken(state.grid, columnIdx, state.currentPlayer);\r\n      const done = checkLastMoveOn(updatedGrid, columnIdx, DefaultDimensions.victory);\r\n      return {\r\n        ...state,\r\n        grid: updatedGrid,\r\n        currentPlayer: state.currentPlayer === Player.PlayerA ? Player.PlayerB : Player.PlayerA,\r\n        winner: done ? state.currentPlayer : Player.None,\r\n        history: { past: [columnIdx, ...state.history.past], future: nextFuture }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers, Reducer } from 'redux';\r\nimport connectFour from './connectFour';\r\n\r\nconst combined = combineReducers({ connectFour });\r\nexport default combined;\r\nexport type ReduxState = (typeof combined) extends Reducer<infer U> ? U : never;\r\n","export const NEW_GAME = 'NEW_GAME';\nexport const PLAY_AT = 'PLAY_AT';\nexport const CANCEL_MOVE = 'CANCEL_MOVE';\nexport const REDO_MOVE = 'REDO_MOVE';\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\r\n\r\nexport default createStore(rootReducer, devToolsEnhancer({}));\r\n","import { NEW_GAME, PLAY_AT, CANCEL_MOVE, REDO_MOVE } from './actionTypes';\r\n\r\nexport const newGame = () => ({\r\n  type: NEW_GAME,\r\n  payload: null\r\n});\r\nexport const playAt = (columnIdx: number) => ({\r\n  type: PLAY_AT,\r\n  payload: { columnIdx }\r\n});\r\nexport const cancelMove = () => ({\r\n  type: CANCEL_MOVE,\r\n  payload: null\r\n});\r\nexport const redoMove = () => ({\r\n  type: REDO_MOVE,\r\n  payload: null\r\n});\r\n\r\nexport type Actions =\r\n  | ReturnType<typeof newGame>\r\n  | ReturnType<typeof playAt>\r\n  | ReturnType<typeof cancelMove>\r\n  | ReturnType<typeof redoMove>;\r\n","import React from 'react';\r\n\r\nimport './BoardCell.css';\r\nimport { Player } from '../models/player';\r\n\r\ninterface Props {\r\n  player: Player;\r\n}\r\ntype State = {};\r\n\r\nclass BoardCell extends React.Component<Props, State> {\r\n  render() {\r\n    return <div className={`board-cell player-${this.props.player}`} />;\r\n  }\r\n}\r\n\r\nexport default BoardCell;\r\n","import React from 'react';\r\n\r\nimport './BoardColumn.css';\r\nimport { Player } from '../models/player';\r\nimport BoardCell from './BoardCell';\r\n\r\ninterface Props {\r\n  onClick?: () => void;\r\n  playable: boolean;\r\n  tokens: Player[];\r\n}\r\ntype State = {};\r\n\r\nclass BoardColumn extends React.Component<Props, State> {\r\n  render() {\r\n    return (\r\n      <div\r\n        className={`board-column ${this.props.playable ? 'playable' : 'not-playable'}`}\r\n        onClick={this.props.playable ? this.props.onClick : undefined}\r\n      >\r\n        {this.props.tokens.map((cell, idx) => (\r\n          <BoardCell key={idx} player={cell} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardColumn;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { playAt } from '../redux/actions';\r\n\r\nimport './Board.css';\r\nimport { ReduxState } from '../redux/reducers';\r\nimport { Dispatch, bindActionCreators, Action } from 'redux';\r\nimport { Player } from '../models/player';\r\nimport BoardColumn from './BoardColumn';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nexport class Board extends React.Component<Props, State> {\r\n  render() {\r\n    const gridContent = [];\r\n    for (let col = 0; col !== this.props.grid[0].length; ++col) {\r\n      const playableColumn = this.props.grid[0][col] === Player.None && !this.props.done;\r\n      const tokens = this.props.grid.map(boardRow => boardRow[col]);\r\n      gridContent.push(\r\n        <BoardColumn\r\n          key={col}\r\n          playable={playableColumn}\r\n          tokens={tokens}\r\n          onClick={playableColumn ? () => this.props.playAt(col) : undefined}\r\n        />\r\n      );\r\n    }\r\n    return <div className={'board player-' + this.props.currentPlayer}>{gridContent}</div>;\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState) {\r\n  return {\r\n    grid: state.connectFour.grid,\r\n    currentPlayer: state.connectFour.currentPlayer,\r\n    done: state.connectFour.winner !== Player.None\r\n  };\r\n}\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({ playAt }, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Board);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { newGame, cancelMove, redoMove } from '../redux/actions';\r\n\r\nimport './Controls.css';\r\nimport { bindActionCreators, Dispatch, Action } from 'redux';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ReduxState } from '../redux/reducers';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nclass Controls extends React.Component<Props, State> {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          id=\"undo-button\"\r\n          variant=\"contained\"\r\n          onClick={() => this.props.cancelMove()}\r\n          disabled={!this.props.canUndo}\r\n        >\r\n          <ArrowBackIcon />\r\n        </Button>\r\n        <Button id=\"new-game-button\" variant=\"contained\" onClick={() => this.props.newGame()}>\r\n          New Game <NoteAddIcon />\r\n        </Button>\r\n        <Button\r\n          id=\"redo-button\"\r\n          variant=\"contained\"\r\n          onClick={() => this.props.redoMove()}\r\n          disabled={!this.props.canRedo}\r\n        >\r\n          <ArrowForwardIcon />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState) {\r\n  return {\r\n    canUndo: state.connectFour.history.past.length > 0,\r\n    canRedo: state.connectFour.history.future.length > 0\r\n  };\r\n}\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({ newGame, cancelMove, redoMove }, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Controls);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Instructions.css';\r\nimport { bindActionCreators, Dispatch, Action } from 'redux';\r\nimport { ReduxState } from '../redux/reducers';\r\nimport { Player } from '../models/player';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nclass Instructions extends React.Component<Props, State> {\r\n  render() {\r\n    const { winner, currentPlayer } = this.props;\r\n    if (winner !== Player.None) {\r\n      return <div className={`instructions victory player-${winner}`}>Player #{winner} won</div>;\r\n    } else {\r\n      return <div className={`instructions player-${currentPlayer}`}>Player #{currentPlayer} turn</div>;\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState) {\r\n  return { currentPlayer: state.connectFour.currentPlayer, winner: state.connectFour.winner };\r\n}\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({}, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Instructions);\r\n","import React, { Component } from 'react';\nimport './ConnectFourApp.css';\n\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport Instructions from './components/Instructions';\n\nclass ConnectFourApp extends Component {\n  render() {\n    return (\n      <div className=\"connect-four-app\">\n        <Instructions />\n        <Board />\n        <Controls />\n      </div>\n    );\n  }\n}\n\nexport default ConnectFourApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './index.css';\nimport ConnectFourApp from './ConnectFourApp';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectFourApp />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}