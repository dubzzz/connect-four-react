{"version":3,"sources":["redux/models/player.tsx","redux/reducers/grid.tsx","redux/reducers/connectFour.tsx","redux/reducers/index.tsx","redux/actionTypes.tsx","redux/store.tsx","redux/actions.tsx","components/Board.tsx","components/Controls.tsx","components/Instructions.tsx","ConnectFourApp.tsx","index.tsx"],"names":["Player","movePositionIt","emptyGrid","width","height","Object","toConsumableArray","Array","map","_","None","x","y","dx","dy","regenerator_default","a","wrap","_context","prev","next","stop","_marked","this","DefaultDimensions","initialState","grid","currentPlayer","PlayerA","winner","combined","combineReducers","connectFour","state","arguments","length","undefined","action","type","objectSpread","Error","columnIdx","payload","updatedGrid","playedColumn","player","rowIdx","row","updateGrid","done","lineLengthSpec","playedRow","computeLength","it","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","pos","value","err","return","lengthForDirection","isSuccessfulMove","PlayerB","createStore","rootReducer","devToolsEnhancer","newGame","playAt","Board","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this","gridContent","_loop","col","playableColumn","push","react_default","createElement","className","boardRow","onClick","handlePlayAt","currentClassName","React","Component","connect","dispatch","bindActionCreators","Controls","Button_default","variant","NoteAdd_default","Instructions","ConnectFourApp","src_components_Instructions","src_components_Board","src_components_Controls","rootElement","document","getElementById","ReactDOM","render","es","store","src_ConnectFourApp_0"],"mappings":"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","file":"static/js/main.36fc24e1.chunk.js","sourcesContent":["export enum Player {\r\n  None = '',\r\n  PlayerA = 'A',\r\n  PlayerB = 'B'\r\n}\r\n","import { Player } from '../models/player';\r\n\r\nexport const emptyGrid = (width: number, height: number) => {\r\n  return [...Array(height)].map(_ => [...Array(width)].map(_ => Player.None));\r\n};\r\n\r\nexport const updateGrid = (grid: Player[][], playedColumn: number, player: Player) => {\r\n  for (let rowIdx = grid.length - 1; rowIdx >= 0; --rowIdx) {\r\n    if (grid[rowIdx][playedColumn] === Player.None) {\r\n      const next = [...grid].map(row => [...row]);\r\n      next[rowIdx][playedColumn] = player;\r\n      return next;\r\n    }\r\n  }\r\n  throw new Error(`Unable to play: invalid position`);\r\n};\r\n\r\nfunction* movePositionIt(x: number, y: number, dx: number, dy: number) {\r\n  while (true) {\r\n    x += dx;\r\n    y += dy;\r\n    yield { x, y };\r\n  }\r\n}\r\n\r\nexport const isSuccessfulMove = (grid: Player[][], playedColumn: number, lineLengthSpec: number) => {\r\n  // find the index of the last token in the column\r\n  let playedRow = 0;\r\n  for (; grid[playedRow][playedColumn] === Player.None; ++playedRow) {}\r\n  const player = grid[playedRow][playedColumn];\r\n\r\n  type It = IterableIterator<{ x: number; y: number }>;\r\n  const computeLength = (it: It) => {\r\n    let length = 0;\r\n    for (const pos of it) {\r\n      if (pos.x < 0 || pos.x >= grid[0].length || pos.y < 0 || pos.y >= grid.length || grid[pos.y][pos.x] !== player)\r\n        break;\r\n      ++length;\r\n    }\r\n    return length;\r\n  };\r\n  const lengthForDirection = (dx: number, dy: number) => {\r\n    return (\r\n      computeLength(movePositionIt(playedColumn, playedRow, -dx, -dy)) +\r\n      computeLength(movePositionIt(playedColumn, playedRow, dx, dy)) +\r\n      1\r\n    );\r\n  };\r\n\r\n  return (\r\n    lengthForDirection(0, 1) >= lineLengthSpec || // column\r\n    lengthForDirection(1, 0) >= lineLengthSpec || // line\r\n    lengthForDirection(1, 1) >= lineLengthSpec || // diagonal top-left\r\n    lengthForDirection(1, -1) >= lineLengthSpec // diagonal top-right\r\n  );\r\n};\r\n","import { PLAY_AT, NEW_GAME } from '../actionTypes';\r\nimport { emptyGrid, updateGrid, isSuccessfulMove } from './grid';\r\nimport { Player } from '../models/player';\r\nimport { Actions, playAt } from '../actions';\r\n\r\nconst DefaultDimensions = {\r\n  height: 6,\r\n  width: 7,\r\n  victory: 4\r\n};\r\n\r\nconst initialState = {\r\n  grid: emptyGrid(DefaultDimensions.width, DefaultDimensions.height),\r\n  currentPlayer: Player.PlayerA,\r\n  winner: Player.None\r\n};\r\n\r\nexport default function(state = initialState, action: Actions) {\r\n  switch (action.type) {\r\n    case NEW_GAME: {\r\n      return {\r\n        ...state,\r\n        grid: emptyGrid(DefaultDimensions.width, DefaultDimensions.height),\r\n        winner: Player.None\r\n      };\r\n    }\r\n    case PLAY_AT: {\r\n      if (state.winner !== Player.None) {\r\n        throw new Error(`Game is over, a player already won`);\r\n      }\r\n      const { columnIdx } = (action as ReturnType<typeof playAt>).payload;\r\n      const updatedGrid = updateGrid(state.grid, columnIdx, state.currentPlayer);\r\n      const done = isSuccessfulMove(updatedGrid, columnIdx, DefaultDimensions.victory);\r\n      return {\r\n        ...state,\r\n        grid: updatedGrid,\r\n        currentPlayer: state.currentPlayer === Player.PlayerA ? Player.PlayerB : Player.PlayerA,\r\n        winner: done ? state.currentPlayer : Player.None\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers, Reducer } from 'redux';\r\nimport connectFour from './connectFour';\r\n\r\nconst combined = combineReducers({ connectFour });\r\nexport default combined;\r\nexport type ReduxState = (typeof combined) extends Reducer<infer U> ? U : never;\r\n","export const NEW_GAME = 'NEW_GAME';\nexport const PLAY_AT = 'PLAY_AT';\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\r\n\r\nexport default createStore(rootReducer, devToolsEnhancer({}));\r\n","import { NEW_GAME, PLAY_AT } from './actionTypes';\r\n\r\nexport const newGame = () => ({\r\n  type: NEW_GAME,\r\n  payload: null\r\n});\r\nexport const playAt = (columnIdx: number) => ({\r\n  type: PLAY_AT,\r\n  payload: { columnIdx }\r\n});\r\n\r\nexport type Actions = ReturnType<typeof newGame> | ReturnType<typeof playAt>;\r\n","import React from 'react';\r\nimport { connect, MapDispatchToPropsFactory } from 'react-redux';\r\nimport { playAt } from '../redux/actions';\r\n\r\nimport './Board.css';\r\nimport { ReduxState } from '../redux/reducers';\r\nimport { Dispatch, bindActionCreators, Action } from 'redux';\r\nimport { Player } from '../redux/models/player';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nclass Board extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n  }\r\n\r\n  handlePlayAt(columnIdx: number) {\r\n    this.props.playAt(columnIdx);\r\n  }\r\n\r\n  render() {\r\n    const gridContent = [];\r\n    for (let col = 0; col !== this.props.grid[0].length; ++col) {\r\n      const playableColumn = this.props.grid[0][col] === Player.None && !this.props.done;\r\n      gridContent.push(\r\n        <div className=\"board-column\">\r\n          {this.props.grid.map(boardRow => {\r\n            const cell = boardRow[col];\r\n            let className = 'board-cell';\r\n            switch (cell) {\r\n              case Player.PlayerA:\r\n                className += ' player-1';\r\n                break;\r\n              case Player.PlayerB:\r\n                className += ' player-2';\r\n                break;\r\n              case Player.None:\r\n                className += ' no-player';\r\n                break;\r\n            }\r\n            className += playableColumn ? ' playable' : ' not-playable';\r\n            return <div className={className} onClick={playableColumn ? () => this.handlePlayAt(col) : undefined} />;\r\n          })}\r\n        </div>\r\n      );\r\n    }\r\n    const currentClassName = this.props.currentPlayer === Player.PlayerA ? 'current-1' : 'current-2';\r\n    return <div className={'board ' + currentClassName}>{gridContent}</div>;\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState) {\r\n  return {\r\n    grid: state.connectFour.grid,\r\n    currentPlayer: state.connectFour.currentPlayer,\r\n    done: state.connectFour.winner !== Player.None\r\n  };\r\n}\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({ playAt }, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Board);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { newGame } from '../redux/actions';\r\n\r\nimport './Controls.css';\r\nimport { bindActionCreators, Dispatch, Action } from 'redux';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nclass Controls extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button variant=\"contained\" onClick={() => this.props.newGame()}>\r\n          New Game <NoteAddIcon />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ntype StateProps = {};\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({ newGame }, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(Controls);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Instructions.css';\r\nimport { bindActionCreators, Dispatch, Action } from 'redux';\r\nimport { ReduxState } from '../redux/reducers';\r\nimport { Player } from '../redux/models/player';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nclass Instructions extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    switch (this.props.winner) {\r\n      case Player.PlayerA:\r\n        return <div className=\"instructions victory player-1\">Player #1 won</div>;\r\n      case Player.PlayerB:\r\n        return <div className=\"instructions victory player-2\">Player #2 won</div>;\r\n      case Player.None: {\r\n        switch (this.props.currentPlayer) {\r\n          case Player.PlayerA:\r\n            return <div className=\"instructions player-1\">Player #1 turn</div>;\r\n          case Player.PlayerB:\r\n            return <div className=\"instructions player-2\">Player #2 turn</div>;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState) {\r\n  return { currentPlayer: state.connectFour.currentPlayer, winner: state.connectFour.winner };\r\n}\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({}, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Instructions);\r\n","import React, { Component } from 'react';\nimport './ConnectFourApp.css';\n\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport Instructions from './components/Instructions';\n\nclass ConnectFourApp extends Component {\n  render() {\n    return (\n      <div className=\"connect-four-app\">\n        <Instructions />\n        <Board />\n        <Controls />\n      </div>\n    );\n  }\n}\n\nexport default ConnectFourApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './index.css';\nimport ConnectFourApp from './ConnectFourApp';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectFourApp />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}