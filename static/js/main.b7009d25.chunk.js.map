{"version":3,"sources":["models/player.tsx","redux/reducers/grid.tsx","redux/reducers/connectFour.tsx","redux/reducers/index.tsx","redux/actionTypes.tsx","redux/store.tsx","redux/actions.tsx","components/BoardCell.tsx","components/BoardColumn.tsx","components/Board.tsx","components/Controls.tsx","components/Instructions.tsx","components/RouteTracker.tsx","ConnectFourApp.tsx","index.tsx"],"names":["Player","emptyGrid","width","height","Object","toConsumableArray","Array","map","_","None","playToken","grid","playedColumn","player","rowIdx","length","next","row","Error","checkLastMoveOn","winningCondition","playedRow","computeLength","it","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","pos","value","x","y","err","return","movePositionIt","regenerator_default","a","mark","dx","dy","wrap","_context","prev","stop","this","lengthForDirection","DefaultDimensions","initialState","currentPlayer","PlayerA","winner","history","past","future","deriveStateForPlay","state","columnIdx","updatedGrid","objectSpread","PlayerB","concat","combined","combineReducers","connectFour","arguments","action","type","payload","_payload","columns","initialPlayer","reduce","prevState","_state$history$past","toArray","nextPast","slice","unplayToken","_state$history$future","nextFuture","createStore","rootReducer","devToolsEnhancer","newGame","playAt","replayAll","cancelMove","redoMove","BoardCell","react_default","createElement","className","props","React","Component","BoardColumn","playable","onClick","tokens","cell","idx","src_components_BoardCell","key","Board","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","_this","gridContent","_loop","col","playableColumn","boardRow","push","src_components_BoardColumn","connect","dispatch","bindActionCreators","Controls","Button_default","id","variant","disabled","canUndo","ArrowBack_default","NoteAdd_default","canRedo","ArrowForward_default","Instructions","_this$props","OnGoingWorkType","RouteTracker","call","onGoingWork","serializedState","serializeStateFromProps","location","pathname","userState","parseState","setState","Manual","redirectUrl","serializeStateFromParsed","prevProps","Game","prevSerializedState","react","Redirect","to","substring","split","cur","b64Char","v","charCodeAt","console","log","JSON","stringify","Math","floor","reverse","String","fromCodePoint","join","parsedOutput","serializeState","nextPlayer","withRouter","ConnectFourApp","components_RouteTracker","src_components_Instructions","src_components_Board","src_components_Controls","rootElement","document","getElementById","ReactDOM","render","es","store","HashRouter","Route","path","component"],"mappings":"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","file":"static/js/main.b7009d25.chunk.js","sourcesContent":["export enum Player {\r\n  None = '',\r\n  PlayerA = '1',\r\n  PlayerB = '2'\r\n}\r\n","import { Player } from '../../models/player';\r\n\r\n/**\r\n * Create an empty grid with the given dimensions\r\n *\r\n * @param width Width of the grid\r\n * @param height Height of the grid\r\n */\r\nexport const emptyGrid = (width: number, height: number) => {\r\n  return [...Array(height)].map(_ => [...Array(width)].map(_ => Player.None));\r\n};\r\n\r\n/**\r\n * Create a new grid corresponding to the current grid\r\n * with the addition of the new token\r\n *\r\n * WARNING: throws in case of full column\r\n *\r\n * @param grid Current grid\r\n * @param playedColumn Location for the new token\r\n * @param player Owner of the token\r\n */\r\nexport const playToken = (grid: Player[][], playedColumn: number, player: Player) => {\r\n  for (let rowIdx = grid.length - 1; rowIdx >= 0; --rowIdx) {\r\n    if (grid[rowIdx][playedColumn] === Player.None) {\r\n      const next = [...grid].map(row => [...row]);\r\n      next[rowIdx][playedColumn] = player;\r\n      return next;\r\n    }\r\n  }\r\n  throw new Error(`Unable to play: invalid position`);\r\n};\r\n\r\n/**\r\n * Create a new grid corresponding to the current grid\r\n * with the removal of the top token of the column\r\n *\r\n * WARNING: throws in case of empty column\r\n *\r\n * @param grid Current grid\r\n * @param playedColumn Location for the new token\r\n */\r\nexport const unplayToken = (grid: Player[][], playedColumn: number) => {\r\n  for (let rowIdx = 0; rowIdx !== grid.length; ++rowIdx) {\r\n    if (grid[rowIdx][playedColumn] !== Player.None) {\r\n      const next = [...grid].map(row => [...row]);\r\n      next[rowIdx][playedColumn] = Player.None;\r\n      return next;\r\n    }\r\n  }\r\n  throw new Error(`Unable to unplay: invalid position`);\r\n};\r\n\r\n/**\r\n * Check if the latest token on {@link playedColumn} makes its owner win the game\r\n *\r\n * @param grid Current grid\r\n * @param playedColumn Column to assess, corresponding to the latest token played\r\n * @param winningCondition Winning condition, minimal length for a victory\r\n */\r\nexport const checkLastMoveOn = (grid: Player[][], playedColumn: number, winningCondition: number) => {\r\n  // find the index of the last token in the column\r\n  let playedRow = 0;\r\n  for (; grid[playedRow][playedColumn] === Player.None; ++playedRow) {}\r\n  const player = grid[playedRow][playedColumn];\r\n\r\n  type It = IterableIterator<{ x: number; y: number }>;\r\n  const computeLength = (it: It) => {\r\n    let length = 0;\r\n    for (const pos of it) {\r\n      if (pos.x < 0 || pos.x >= grid[0].length || pos.y < 0 || pos.y >= grid.length || grid[pos.y][pos.x] !== player)\r\n        break;\r\n      ++length;\r\n    }\r\n    return length;\r\n  };\r\n  const movePositionIt = function*(x: number, y: number, dx: number, dy: number) {\r\n    while (true) yield { x: (x += dx), y: (y += dy) };\r\n  };\r\n  const lengthForDirection = (dx: number, dy: number) => {\r\n    return (\r\n      computeLength(movePositionIt(playedColumn, playedRow, -dx, -dy)) +\r\n      computeLength(movePositionIt(playedColumn, playedRow, dx, dy)) +\r\n      1\r\n    );\r\n  };\r\n\r\n  return (\r\n    lengthForDirection(0, 1) >= winningCondition || // column\r\n    lengthForDirection(1, 0) >= winningCondition || // line\r\n    lengthForDirection(1, 1) >= winningCondition || // diagonal top-left\r\n    lengthForDirection(1, -1) >= winningCondition // diagonal top-right\r\n  );\r\n};\r\n","import { PLAY_AT, NEW_GAME, CANCEL_MOVE, REDO_MOVE, REPLAY_ALL } from '../actionTypes';\r\nimport { emptyGrid, playToken, checkLastMoveOn, unplayToken } from './grid';\r\nimport { Player } from '../../models/player';\r\nimport { Actions, playAt, replayAll } from '../actions';\r\n\r\nexport const DefaultDimensions = {\r\n  height: 6,\r\n  width: 7,\r\n  victory: 4\r\n};\r\n\r\ntype State = {\r\n  grid: Player[][];\r\n  currentPlayer: Player;\r\n  winner: Player;\r\n  history: { past: number[]; future: number[] };\r\n};\r\n\r\nconst initialState: State = {\r\n  grid: emptyGrid(DefaultDimensions.width, DefaultDimensions.height),\r\n  currentPlayer: Player.PlayerA,\r\n  winner: Player.None,\r\n  history: { past: [], future: [] }\r\n};\r\n\r\nconst deriveStateForPlay = function(state: State, columnIdx: number) {\r\n  if (state.winner !== Player.None) {\r\n    throw new Error(`Game is over, a player already won`);\r\n  }\r\n  const updatedGrid = playToken(state.grid, columnIdx, state.currentPlayer);\r\n  const done = checkLastMoveOn(updatedGrid, columnIdx, DefaultDimensions.victory);\r\n  return {\r\n    ...state,\r\n    grid: updatedGrid,\r\n    currentPlayer: state.currentPlayer === Player.PlayerA ? Player.PlayerB : Player.PlayerA,\r\n    winner: done ? state.currentPlayer : Player.None,\r\n    history: { past: [columnIdx, ...state.history.past], future: [] }\r\n  };\r\n};\r\n\r\nexport default function(state = initialState, action: Actions) {\r\n  switch (action.type) {\r\n    case NEW_GAME: {\r\n      return {\r\n        ...state,\r\n        grid: emptyGrid(DefaultDimensions.width, DefaultDimensions.height),\r\n        winner: Player.None,\r\n        history: { past: [], future: [] }\r\n      };\r\n    }\r\n    case PLAY_AT: {\r\n      const { columnIdx } = (action as ReturnType<typeof playAt>).payload;\r\n      return deriveStateForPlay(state, columnIdx);\r\n    }\r\n    case REPLAY_ALL: {\r\n      const { columns, initialPlayer } = (action as ReturnType<typeof replayAll>).payload;\r\n      const initialState = {\r\n        ...state,\r\n        currentPlayer: initialPlayer,\r\n        grid: emptyGrid(DefaultDimensions.width, DefaultDimensions.height),\r\n        winner: Player.None,\r\n        history: { past: [], future: [] }\r\n      };\r\n      return columns.reduce(\r\n        (prevState: State, columnIdx: number) => deriveStateForPlay(prevState, columnIdx),\r\n        initialState\r\n      );\r\n    }\r\n    case CANCEL_MOVE: {\r\n      if (state.history.past.length === 0) {\r\n        throw new Error('Unable to undo operation, no more history available');\r\n      }\r\n      const [columnIdx, ...nextPast] = state.history.past;\r\n      const updatedGrid = unplayToken(state.grid, columnIdx);\r\n      return {\r\n        ...state,\r\n        grid: updatedGrid,\r\n        currentPlayer: state.currentPlayer === Player.PlayerA ? Player.PlayerB : Player.PlayerA,\r\n        winner: Player.None,\r\n        history: { past: nextPast, future: [columnIdx, ...state.history.future] }\r\n      };\r\n    }\r\n    case REDO_MOVE: {\r\n      if (state.history.future.length === 0) {\r\n        throw new Error('Unable to redo operation, no more history available');\r\n      }\r\n      const [columnIdx, ...nextFuture] = state.history.future;\r\n      const updatedGrid = playToken(state.grid, columnIdx, state.currentPlayer);\r\n      const done = checkLastMoveOn(updatedGrid, columnIdx, DefaultDimensions.victory);\r\n      return {\r\n        ...state,\r\n        grid: updatedGrid,\r\n        currentPlayer: state.currentPlayer === Player.PlayerA ? Player.PlayerB : Player.PlayerA,\r\n        winner: done ? state.currentPlayer : Player.None,\r\n        history: { past: [columnIdx, ...state.history.past], future: nextFuture }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers, Reducer } from 'redux';\r\nimport connectFour from './connectFour';\r\n\r\nconst combined = combineReducers({ connectFour });\r\nexport default combined;\r\nexport type ReduxState = (typeof combined) extends Reducer<infer U> ? U : never;\r\n","export const NEW_GAME = 'NEW_GAME';\nexport const PLAY_AT = 'PLAY_AT';\nexport const REPLAY_ALL = 'REPLAY_ALL';\nexport const CANCEL_MOVE = 'CANCEL_MOVE';\nexport const REDO_MOVE = 'REDO_MOVE';\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\r\n\r\nexport default createStore(rootReducer, devToolsEnhancer({}));\r\n","import { NEW_GAME, PLAY_AT, CANCEL_MOVE, REDO_MOVE, REPLAY_ALL } from './actionTypes';\r\nimport { Player } from '../models/player';\r\n\r\nexport const newGame = () => ({\r\n  type: NEW_GAME,\r\n  payload: null\r\n});\r\nexport const playAt = (columnIdx: number) => ({\r\n  type: PLAY_AT,\r\n  payload: { columnIdx }\r\n});\r\nexport const replayAll = (columns: number[], initialPlayer: Player) => ({\r\n  type: REPLAY_ALL,\r\n  payload: { columns, initialPlayer }\r\n});\r\nexport const cancelMove = () => ({\r\n  type: CANCEL_MOVE,\r\n  payload: null\r\n});\r\nexport const redoMove = () => ({\r\n  type: REDO_MOVE,\r\n  payload: null\r\n});\r\n\r\nexport type Actions =\r\n  | ReturnType<typeof newGame>\r\n  | ReturnType<typeof playAt>\r\n  | ReturnType<typeof replayAll>\r\n  | ReturnType<typeof cancelMove>\r\n  | ReturnType<typeof redoMove>;\r\n","import React from 'react';\r\n\r\nimport './BoardCell.css';\r\nimport { Player } from '../models/player';\r\n\r\ninterface Props {\r\n  player: Player;\r\n}\r\ntype State = {};\r\n\r\nclass BoardCell extends React.Component<Props, State> {\r\n  render() {\r\n    return <div className={`board-cell player-${this.props.player}`} />;\r\n  }\r\n}\r\n\r\nexport default BoardCell;\r\n","import React from 'react';\r\n\r\nimport './BoardColumn.css';\r\nimport { Player } from '../models/player';\r\nimport BoardCell from './BoardCell';\r\n\r\ninterface Props {\r\n  onClick?: () => void;\r\n  playable: boolean;\r\n  tokens: Player[];\r\n}\r\ntype State = {};\r\n\r\nclass BoardColumn extends React.Component<Props, State> {\r\n  render() {\r\n    return (\r\n      <div\r\n        className={`board-column ${this.props.playable ? 'playable' : 'not-playable'}`}\r\n        onClick={this.props.playable ? this.props.onClick : undefined}\r\n      >\r\n        {this.props.tokens.map((cell, idx) => (\r\n          <BoardCell key={idx} player={cell} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardColumn;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { playAt } from '../redux/actions';\r\n\r\nimport './Board.css';\r\nimport { ReduxState } from '../redux/reducers';\r\nimport { Dispatch, bindActionCreators, Action } from 'redux';\r\nimport { Player } from '../models/player';\r\nimport BoardColumn from './BoardColumn';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nexport class Board extends React.Component<Props, State> {\r\n  render() {\r\n    const gridContent = [];\r\n    for (let col = 0; col !== this.props.grid[0].length; ++col) {\r\n      const playableColumn = this.props.grid[0][col] === Player.None && !this.props.done;\r\n      const tokens = this.props.grid.map(boardRow => boardRow[col]);\r\n      gridContent.push(\r\n        <BoardColumn\r\n          key={col}\r\n          playable={playableColumn}\r\n          tokens={tokens}\r\n          onClick={playableColumn ? () => this.props.playAt(col) : undefined}\r\n        />\r\n      );\r\n    }\r\n    return <div className={'board player-' + this.props.currentPlayer}>{gridContent}</div>;\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState) {\r\n  return {\r\n    grid: state.connectFour.grid,\r\n    currentPlayer: state.connectFour.currentPlayer,\r\n    done: state.connectFour.winner !== Player.None\r\n  };\r\n}\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({ playAt }, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Board);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { newGame, cancelMove, redoMove } from '../redux/actions';\r\n\r\nimport './Controls.css';\r\nimport { bindActionCreators, Dispatch, Action } from 'redux';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport Button from '@material-ui/core/Button';\r\nimport { ReduxState } from '../redux/reducers';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nclass Controls extends React.Component<Props, State> {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          id=\"undo-button\"\r\n          variant=\"contained\"\r\n          onClick={() => this.props.cancelMove()}\r\n          disabled={!this.props.canUndo}\r\n        >\r\n          <ArrowBackIcon />\r\n        </Button>\r\n        <Button id=\"new-game-button\" variant=\"contained\" onClick={() => this.props.newGame()}>\r\n          New Game <NoteAddIcon />\r\n        </Button>\r\n        <Button\r\n          id=\"redo-button\"\r\n          variant=\"contained\"\r\n          onClick={() => this.props.redoMove()}\r\n          disabled={!this.props.canRedo}\r\n        >\r\n          <ArrowForwardIcon />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState) {\r\n  return {\r\n    canUndo: state.connectFour.history.past.length > 0,\r\n    canRedo: state.connectFour.history.future.length > 0\r\n  };\r\n}\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({ newGame, cancelMove, redoMove }, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Controls);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Instructions.css';\r\nimport { bindActionCreators, Dispatch, Action } from 'redux';\r\nimport { ReduxState } from '../redux/reducers';\r\nimport { Player } from '../models/player';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nclass Instructions extends React.Component<Props, State> {\r\n  render() {\r\n    const { winner, currentPlayer } = this.props;\r\n    if (winner !== Player.None) {\r\n      return <div className={`instructions victory player-${winner}`}>Player #{winner} won</div>;\r\n    } else {\r\n      return <div className={`instructions player-${currentPlayer}`}>Player #{currentPlayer} turn</div>;\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState) {\r\n  return { currentPlayer: state.connectFour.currentPlayer, winner: state.connectFour.winner };\r\n}\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({}, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Instructions);\r\n","import React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Redirect, withRouter } from 'react-router-dom';\r\nimport { Dispatch, Action, bindActionCreators } from 'redux';\r\nimport { ReduxState } from '../redux/reducers';\r\nimport { replayAll } from '../redux/actions';\r\nimport { Player } from '../models/player';\r\n\r\nenum OnGoingWorkType {\r\n  None = 'None',\r\n  Game = 'Game',\r\n  Manual = 'Manual'\r\n}\r\n\r\ninterface Props extends StateProps, DispatchProps, RouterProps {}\r\ntype State =\r\n  | { onGoingWork: OnGoingWorkType.None }\r\n  | { onGoingWork: OnGoingWorkType.Game; redirectUrl: string }\r\n  | { onGoingWork: OnGoingWorkType.Manual; redirectUrl: string };\r\n\r\nexport class RouteTracker extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { onGoingWork: OnGoingWorkType.None };\r\n  }\r\n  private static parseState(serializedState: string): { columns: number[]; initialPlayer: Player } {\r\n    const b64ToInt = (b64Char: string): number => {\r\n      if ('A' <= b64Char && b64Char <= 'Z') return b64Char.charCodeAt(0) - 'A'.charCodeAt(0);\r\n      if ('a' <= b64Char && b64Char <= 'z') return b64Char.charCodeAt(0) - 'a'.charCodeAt(0) + 26;\r\n      if ('0' <= b64Char && b64Char <= '9') return b64Char.charCodeAt(0) - '0'.charCodeAt(0) + 52;\r\n      return b64Char === '+' ? 62 : 63;\r\n    };\r\n    const initialPlayer = serializedState[1] === '2' ? Player.PlayerB : Player.PlayerA;\r\n    const columns = serializedState\r\n      .substring(2)\r\n      .split('')\r\n      .reduce((prev: number[], cur) => {\r\n        const v = b64ToInt(cur);\r\n        if (v < 8) {\r\n          prev.push(v - 1);\r\n          console.log(JSON.stringify(prev));\r\n        } else {\r\n          prev.push(Math.floor(v / 8) - 1);\r\n          prev.push((v % 8) - 1);\r\n          console.log(JSON.stringify(prev));\r\n        }\r\n        return prev;\r\n      }, [])\r\n      .reverse();\r\n    return { initialPlayer, columns };\r\n  }\r\n  private static serializeState(initialPlayer: Player, past: number[]): string {\r\n    const b64 = past\r\n      .reduce((prev: number[], pos) => {\r\n        if (prev[prev.length - 1] < 8) {\r\n          prev[prev.length - 1] *= 8;\r\n          prev[prev.length - 1] += pos + 1;\r\n        } else {\r\n          prev.push(pos + 1);\r\n        }\r\n        return prev;\r\n      }, [])\r\n      .map(v => {\r\n        if (v < 26) return String.fromCodePoint(v + 65); // A-Z\r\n        if (v < 52) return String.fromCodePoint(v + 97 - 26); // a-z\r\n        if (v < 62) return String.fromCodePoint(v + 48 - 52); // 0-9\r\n        return v === 62 ? '+' : '/';\r\n      });\r\n    return '/' + initialPlayer + b64.join('');\r\n  }\r\n  private static serializeStateFromParsed(parsedOutput: { columns: number[]; initialPlayer: Player }): string {\r\n    return this.serializeState(parsedOutput.initialPlayer, parsedOutput.columns.reverse());\r\n  }\r\n  private static serializeStateFromProps(props: Props): string {\r\n    const currentPlayer = props.connectFour.currentPlayer;\r\n    const nextPlayer = currentPlayer === Player.PlayerA ? Player.PlayerB : Player.PlayerA;\r\n    const initialPlayer = props.connectFour.history.past.length % 2 === 0 ? currentPlayer : nextPlayer;\r\n    return this.serializeState(initialPlayer, props.connectFour.history.past);\r\n  }\r\n  componentDidMount() {\r\n    // Custom location\r\n    const serializedState = RouteTracker.serializeStateFromProps(this.props);\r\n    if (this.props.location.pathname !== serializedState) {\r\n      const userState = RouteTracker.parseState(this.props.location.pathname);\r\n      this.props.replayAll(userState.columns, userState.initialPlayer);\r\n      this.setState({\r\n        onGoingWork: OnGoingWorkType.Manual,\r\n        redirectUrl: RouteTracker.serializeStateFromParsed(userState)\r\n      });\r\n      return;\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps: Props) {\r\n    // Case #1: Ending a game update\r\n    if (this.state.onGoingWork === OnGoingWorkType.Game) {\r\n      if (this.props.location.pathname === this.state.redirectUrl) {\r\n        this.setState({ onGoingWork: OnGoingWorkType.None });\r\n      }\r\n      return;\r\n    }\r\n    // Case #2: Ending a manual update\r\n    if (this.state.onGoingWork === OnGoingWorkType.Manual) {\r\n      const serializedState = RouteTracker.serializeStateFromProps(this.props);\r\n      if (this.props.location.pathname === this.state.redirectUrl && this.state.redirectUrl === serializedState) {\r\n        this.setState({ onGoingWork: OnGoingWorkType.None });\r\n      }\r\n      return;\r\n    }\r\n    // Case #3: Game update\r\n    // ________ Grid as been updated: location has to be updated\r\n    const prevSerializedState = RouteTracker.serializeStateFromProps(prevProps);\r\n    const serializedState = RouteTracker.serializeStateFromProps(this.props);\r\n    if (serializedState !== prevSerializedState) {\r\n      this.setState({ onGoingWork: OnGoingWorkType.Game, redirectUrl: serializedState });\r\n      return;\r\n    }\r\n    // Case #4: Manual location update\r\n    // ________ User manually changed the location: grid has to be updated\r\n    if (this.props.location.pathname !== prevProps.location.pathname) {\r\n      const userState = RouteTracker.parseState(this.props.location.pathname);\r\n      this.props.replayAll(userState.columns, userState.initialPlayer);\r\n      this.setState({\r\n        onGoingWork: OnGoingWorkType.Manual,\r\n        redirectUrl: RouteTracker.serializeStateFromParsed(userState)\r\n      });\r\n      return;\r\n    }\r\n  }\r\n  render() {\r\n    if (this.state.onGoingWork === OnGoingWorkType.None || this.state.redirectUrl === this.props.location.pathname) {\r\n      return <Fragment />;\r\n    }\r\n    return <Redirect to={this.state.redirectUrl} />;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxState) => state;\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({ replayAll }, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\ntype RouterProps = {\r\n  history: {\r\n    push: (location: string) => void;\r\n  };\r\n  location: { pathname: string };\r\n  match: { params: { state?: string } };\r\n};\r\n\r\nexport default withRouter(connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(RouteTracker) as any) as any;\r\n","import React, { Component } from 'react';\nimport './ConnectFourApp.css';\n\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport Instructions from './components/Instructions';\nimport RouteTracker from './components/RouteTracker';\n\nclass ConnectFourApp extends Component {\n  render() {\n    return (\n      <div className=\"connect-four-app\">\n        <RouteTracker />\n        <Instructions />\n        <Board />\n        <Controls />\n      </div>\n    );\n  }\n}\n\nexport default ConnectFourApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './index.css';\nimport ConnectFourApp from './ConnectFourApp';\n\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <Route path=\"/:state?\" component={ConnectFourApp} />\n    </Router>\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}