{"version":3,"sources":["models/player.tsx","redux/reducers/grid.tsx","redux/reducers/connectFour.tsx","redux/reducers/index.tsx","redux/actionTypes.tsx","redux/store.tsx","redux/actions.tsx","components/BoardCell.tsx","components/BoardColumn.tsx","components/Board.tsx","components/Controls.tsx","components/Instructions.tsx","ConnectFourApp.tsx","index.tsx"],"names":["Player","emptyGrid","width","height","Object","toConsumableArray","Array","map","_","None","DefaultDimensions","initialState","grid","currentPlayer","PlayerA","winner","combined","combineReducers","connectFour","state","arguments","length","undefined","action","type","objectSpread","Error","columnIdx","payload","updatedGrid","playedColumn","player","rowIdx","next","row","playToken","done","winningCondition","playedRow","computeLength","it","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","pos","value","x","y","err","return","movePositionIt","regenerator_default","a","mark","dx","dy","wrap","_context","prev","stop","this","lengthForDirection","checkLastMoveOn","PlayerB","createStore","rootReducer","devToolsEnhancer","newGame","playAt","BoardCell","react_default","createElement","className","concat","props","React","Component","BoardColumn","playable","onClick","tokens","cell","idx","src_components_BoardCell","key","Board","_this","gridContent","_loop","col","playableColumn","boardRow","push","src_components_BoardColumn","connect","dispatch","bindActionCreators","Controls","Button_default","variant","NoteAdd_default","Instructions","_this$props","ConnectFourApp","src_components_Instructions","src_components_Board","src_components_Controls","rootElement","document","getElementById","ReactDOM","render","es","store","src_ConnectFourApp_0"],"mappings":"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","file":"static/js/main.4c76b630.chunk.js","sourcesContent":["export enum Player {\r\n  None = '',\r\n  PlayerA = '1',\r\n  PlayerB = '2'\r\n}\r\n","import { Player } from '../../models/player';\r\n\r\n/**\r\n * Create an empty grid with the given dimensions\r\n *\r\n * @param width Width of the grid\r\n * @param height Height of the grid\r\n */\r\nexport const emptyGrid = (width: number, height: number) => {\r\n  return [...Array(height)].map(_ => [...Array(width)].map(_ => Player.None));\r\n};\r\n\r\n/**\r\n * Create a new grid corresponding to the current grid\r\n * with the addition of the new token\r\n *\r\n * WARNING: throws in case of full column\r\n *\r\n * @param grid Current grid\r\n * @param playedColumn Location for the new token\r\n * @param player Owner of the token\r\n */\r\nexport const playToken = (grid: Player[][], playedColumn: number, player: Player) => {\r\n  for (let rowIdx = grid.length - 1; rowIdx >= 0; --rowIdx) {\r\n    if (grid[rowIdx][playedColumn] === Player.None) {\r\n      const next = [...grid].map(row => [...row]);\r\n      next[rowIdx][playedColumn] = player;\r\n      return next;\r\n    }\r\n  }\r\n  throw new Error(`Unable to play: invalid position`);\r\n};\r\n\r\n/**\r\n * Check if the latest token on {@link playedColumn} makes its owner win the game\r\n *\r\n * @param grid Current grid\r\n * @param playedColumn Column to assess, corresponding to the latest token played\r\n * @param winningCondition Winning condition, minimal length for a victory\r\n */\r\nexport const checkLastMoveOn = (grid: Player[][], playedColumn: number, winningCondition: number) => {\r\n  // find the index of the last token in the column\r\n  let playedRow = 0;\r\n  for (; grid[playedRow][playedColumn] === Player.None; ++playedRow) {}\r\n  const player = grid[playedRow][playedColumn];\r\n\r\n  type It = IterableIterator<{ x: number; y: number }>;\r\n  const computeLength = (it: It) => {\r\n    let length = 0;\r\n    for (const pos of it) {\r\n      if (pos.x < 0 || pos.x >= grid[0].length || pos.y < 0 || pos.y >= grid.length || grid[pos.y][pos.x] !== player)\r\n        break;\r\n      ++length;\r\n    }\r\n    return length;\r\n  };\r\n  const movePositionIt = function*(x: number, y: number, dx: number, dy: number) {\r\n    while (true) yield { x: (x += dx), y: (y += dy) };\r\n  };\r\n  const lengthForDirection = (dx: number, dy: number) => {\r\n    return (\r\n      computeLength(movePositionIt(playedColumn, playedRow, -dx, -dy)) +\r\n      computeLength(movePositionIt(playedColumn, playedRow, dx, dy)) +\r\n      1\r\n    );\r\n  };\r\n\r\n  return (\r\n    lengthForDirection(0, 1) >= winningCondition || // column\r\n    lengthForDirection(1, 0) >= winningCondition || // line\r\n    lengthForDirection(1, 1) >= winningCondition || // diagonal top-left\r\n    lengthForDirection(1, -1) >= winningCondition // diagonal top-right\r\n  );\r\n};\r\n","import { PLAY_AT, NEW_GAME } from '../actionTypes';\r\nimport { emptyGrid, playToken, checkLastMoveOn } from './grid';\r\nimport { Player } from '../../models/player';\r\nimport { Actions, playAt } from '../actions';\r\n\r\nexport const DefaultDimensions = {\r\n  height: 6,\r\n  width: 7,\r\n  victory: 4\r\n};\r\n\r\nconst initialState = {\r\n  grid: emptyGrid(DefaultDimensions.width, DefaultDimensions.height),\r\n  currentPlayer: Player.PlayerA,\r\n  winner: Player.None\r\n};\r\n\r\nexport default function(state = initialState, action: Actions) {\r\n  switch (action.type) {\r\n    case NEW_GAME: {\r\n      return {\r\n        ...state,\r\n        grid: emptyGrid(DefaultDimensions.width, DefaultDimensions.height),\r\n        winner: Player.None\r\n      };\r\n    }\r\n    case PLAY_AT: {\r\n      if (state.winner !== Player.None) {\r\n        throw new Error(`Game is over, a player already won`);\r\n      }\r\n      const { columnIdx } = (action as ReturnType<typeof playAt>).payload;\r\n      const updatedGrid = playToken(state.grid, columnIdx, state.currentPlayer);\r\n      const done = checkLastMoveOn(updatedGrid, columnIdx, DefaultDimensions.victory);\r\n      return {\r\n        ...state,\r\n        grid: updatedGrid,\r\n        currentPlayer: state.currentPlayer === Player.PlayerA ? Player.PlayerB : Player.PlayerA,\r\n        winner: done ? state.currentPlayer : Player.None\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers, Reducer } from 'redux';\r\nimport connectFour from './connectFour';\r\n\r\nconst combined = combineReducers({ connectFour });\r\nexport default combined;\r\nexport type ReduxState = (typeof combined) extends Reducer<infer U> ? U : never;\r\n","export const NEW_GAME = 'NEW_GAME';\nexport const PLAY_AT = 'PLAY_AT';\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension/logOnlyInProduction';\r\n\r\nexport default createStore(rootReducer, devToolsEnhancer({}));\r\n","import { NEW_GAME, PLAY_AT } from './actionTypes';\r\n\r\nexport const newGame = () => ({\r\n  type: NEW_GAME,\r\n  payload: null\r\n});\r\nexport const playAt = (columnIdx: number) => ({\r\n  type: PLAY_AT,\r\n  payload: { columnIdx }\r\n});\r\n\r\nexport type Actions = ReturnType<typeof newGame> | ReturnType<typeof playAt>;\r\n","import React from 'react';\r\n\r\nimport './BoardCell.css';\r\nimport { Player } from '../models/player';\r\n\r\ninterface Props {\r\n  player: Player;\r\n}\r\ntype State = {};\r\n\r\nclass BoardCell extends React.Component<Props, State> {\r\n  render() {\r\n    return <div className={`board-cell player-${this.props.player}`} />;\r\n  }\r\n}\r\n\r\nexport default BoardCell;\r\n","import React from 'react';\r\n\r\nimport './BoardColumn.css';\r\nimport { Player } from '../models/player';\r\nimport BoardCell from './BoardCell';\r\n\r\ninterface Props {\r\n  onClick?: () => void;\r\n  playable: boolean;\r\n  tokens: Player[];\r\n}\r\ntype State = {};\r\n\r\nclass BoardColumn extends React.Component<Props, State> {\r\n  render() {\r\n    return (\r\n      <div className={`board-column ${this.props.playable ? 'playable' : 'not-playable'}`} onClick={this.props.onClick}>\r\n        {this.props.tokens.map((cell, idx) => (\r\n          <BoardCell key={idx} player={cell} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoardColumn;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { playAt } from '../redux/actions';\r\n\r\nimport './Board.css';\r\nimport { ReduxState } from '../redux/reducers';\r\nimport { Dispatch, bindActionCreators, Action } from 'redux';\r\nimport { Player } from '../models/player';\r\nimport BoardColumn from './BoardColumn';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nclass Board extends React.Component<Props, State> {\r\n  render() {\r\n    const gridContent = [];\r\n    for (let col = 0; col !== this.props.grid[0].length; ++col) {\r\n      const playableColumn = this.props.grid[0][col] === Player.None && !this.props.done;\r\n      const tokens = this.props.grid.map(boardRow => boardRow[col]);\r\n      gridContent.push(\r\n        <BoardColumn\r\n          key={col}\r\n          playable={playableColumn}\r\n          tokens={tokens}\r\n          onClick={playableColumn ? () => this.props.playAt(col) : undefined}\r\n        />\r\n      );\r\n    }\r\n    return <div className={'board player-' + this.props.currentPlayer}>{gridContent}</div>;\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState) {\r\n  return {\r\n    grid: state.connectFour.grid,\r\n    currentPlayer: state.connectFour.currentPlayer,\r\n    done: state.connectFour.winner !== Player.None\r\n  };\r\n}\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({ playAt }, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Board);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { newGame } from '../redux/actions';\r\n\r\nimport './Controls.css';\r\nimport { bindActionCreators, Dispatch, Action } from 'redux';\r\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nclass Controls extends React.Component<Props, State> {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button variant=\"contained\" onClick={() => this.props.newGame()}>\r\n          New Game <NoteAddIcon />\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ntype StateProps = {};\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({ newGame }, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(Controls);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './Instructions.css';\r\nimport { bindActionCreators, Dispatch, Action } from 'redux';\r\nimport { ReduxState } from '../redux/reducers';\r\nimport { Player } from '../models/player';\r\n\r\ninterface Props extends StateProps, DispatchProps {}\r\ntype State = {};\r\n\r\nclass Instructions extends React.Component<Props, State> {\r\n  render() {\r\n    const { winner, currentPlayer } = this.props;\r\n    if (winner !== Player.None) {\r\n      return <div className={`instructions victory player-${winner}`}>Player #{winner} won</div>;\r\n    } else {\r\n      return <div className={`instructions player-${currentPlayer}`}>Player #{currentPlayer} turn</div>;\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state: ReduxState) {\r\n  return { currentPlayer: state.connectFour.currentPlayer, winner: state.connectFour.winner };\r\n}\r\ntype StateProps = ReturnType<typeof mapStateToProps>;\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<Action>) {\r\n  return { ...bindActionCreators({}, dispatch) };\r\n}\r\ntype DispatchProps = ReturnType<typeof mapDispatchToProps>;\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Instructions);\r\n","import React, { Component } from 'react';\nimport './ConnectFourApp.css';\n\nimport Board from './components/Board';\nimport Controls from './components/Controls';\nimport Instructions from './components/Instructions';\n\nclass ConnectFourApp extends Component {\n  render() {\n    return (\n      <div className=\"connect-four-app\">\n        <Instructions />\n        <Board />\n        <Controls />\n      </div>\n    );\n  }\n}\n\nexport default ConnectFourApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './index.css';\nimport ConnectFourApp from './ConnectFourApp';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectFourApp />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}